<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="routing">
    <title value="Vaadin router" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
        The Vaadin router
      ]]>
    </description>
    <concept name="basic-usage">
      <title value="Basic usage" />
      <docLink value="https://vaadin.com/router" />
      <description>
        <![CDATA[
          The router config maps URL paths to Web Components. Vaadin Router goes through the routes until it finds the first match, 
          creates an instance of the route component, and inserts it into the router outlet(replacing any pre-existing outlet)
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
import {Router} from '@vaadin/router';

const outlet = document.getElementById('outlet');
const router = new Router(outlet);
router.setRoutes([
  {path: '/',     component: 'x-home-view'},
  {path: '/users',  component: 'x-user-list'},
  {path: '/users/:user', component: 'x-user-profile'},
  {path: '(.*)', component: 'x-not-found-view'},
]);
        ]]>
      </code>
    </concept>
    <concept name="child-routes">
      <title value="Child Routes" />
      <docLink value="https://vaadin.com/router" />
      <description>
        <![CDATA[
          Each route can have child routes, which makes it easier to group related routes together under a common parent. 
          This is optional, i.e. the same routes config can be expressed as a flat list, or as a parent-children tree.
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
import {Router} from '@vaadin/router';

const outlet = document.getElementById('outlet');
const router = new Router(outlet);
router.setRoutes([
  {path: '/', component: 'x-home-view'},
  {
    path: '/users',
    children: [
      {path: '/', component: 'x-user-list'},
      {path: '/:user', component: 'x-user-profile'}
    ]
  },
]);
        ]]>
      </code>
    </concept>
    <concept name="fallback-routes-404">
      <title value="Fallback Routes(404)" />
      <docLink value="https://vaadin.com/router" />
      <description>
        <![CDATA[
          There can be different fallbacks for different route prefixes, but since the route resolution is based on the first match, 
          the fallback route should always be after other alternatives.
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
router.setRoutes([
  {path: '/',       component: 'x-home-view'},
  {path: '/users',    component: 'x-user-list'},
  {path: '/users/(.*)',   component: 'x-user-not-found-view'},
  {path: '(.*)',       component: 'x-not-found-view'}
]);
        ]]>
      </code>
    </concept>
    <concept name="route-parameters">
      <title value="Accessing Route Parameters" />
      <docLink value="https://vaadin.com/router" />
      <description>
        <![CDATA[
          Route parameters are bound to the <code>location.params</code> property of the route Web Component (the route property is set on the route component by Vaadin Router).
          In this example, the web component <code>x-project-view</code> will receive a parameter location.
          <code>location.params.id</code> will return the value 42 when navigating to <code>/projects/42</code>.
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
<dom-module id="x-project-view">
  <template>
    <h1>Project</h1>
    <p>ID: [[location.params.id]]</p>
  </template>
</dom-module>
Polymer({is: 'x-project-view'});

router.setRoutes([
  {path: '/',       component: 'x-home-view'},
  {path: '/projects/:id',  component: 'x-project-view'}
]);
        ]]>
      </code>
    </concept>
    <concept name="redirects">
      <title value="Redirects" />
      <docLink value="https://vaadin.com/router" />
      <description>
        <![CDATA[
          Vaadin Router supports the <code>redirect</code> property on the route objects, allowing to unconditionally redirect users from one path to another.
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
router.setRoutes([
    {path: '/', component: 'x-home-view'},
    {path: '/u/:user', redirect: '/user/:user'},
    {path: '/data/:segments+/:path+', redirect: '/kb/:path+'},
    {path: '/kb/:path+', component: 'x-knowledge-base'},
  ]);
        ]]>
      </code>
    </concept>
    <concept name="lazy-loading">
      <title value="Lazy loading JS bundles" />
      <docLink value="https://vaadin.com/router" />
      <description>
        <![CDATA[
          Vaadin Router works great with code splitting. If your build tool allows you to split your code into various bundles which can then be loaded on demand, 
          Vaadin Router can load these bundled lazily just-in-time before rendering a route.
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
router.setRoutes([
    {path: '/', component: 'x-home-view'},
    {
      path: '/user/:id',
      bundle: '/user.bundle.js',
      component: 'x-user-js-bundle-view' // <-- defined in the bundle
    },
  ]);
        ]]>
      </code>
    </concept>
    <concept name="more-tricks">
      <title value="More tricks" />
      <docLink value="https://vaadin.github.io/vaadin-router/vaadin-router/#/classes/Router" />
      <description>
        <![CDATA[
          Other tricks
        ]]>
      </description>
      <code language="javascript">
        <![CDATA[
// Default 'baseUrl'
const _basePath = `${window.location.pathname}`;
const router = new Router(_env.container, { baseUrl: _basePath });

const { routerConfig } = _ROUTER._env;
const _routes = [];

// Redirect using 'action' and 'commands'
_routes.push({path: '/', action: (context, commands) => {
  return commands.redirect(routerConfig.default);
}});

Object.keys(routerConfig.routes).forEach(_k => {
  _routes.push({
    path: routerConfig.routes[_k].url, 
    action: (context, commands) => {
      return _ROUTER._changeView({ name: _k, context });
    }
  });
});

router.setRoutes(_routes);
        ]]>
      </code>
    </concept>
  </topic>
</data>