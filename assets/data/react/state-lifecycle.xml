<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="state-lifecycle">
    <title value="React state and lifecycle" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
        State is similar to props, but it is private and fully controlled by the component
      ]]>
    </description>
    <concept name="state-class">
      <title value="Adding Local State to a Class" />
      <docLink value="https://reactjs.org/docs/state-and-lifecycle.html" />
      <description>
        <![CDATA[
          Add a class constructor that assigns the initial <code>this.state</code>
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);
        ]]>
      </code>
    </concept>
    <concept name="state-correct">
      <title value="Using State Correctly" />
      <docLink value="https://reactjs.org/docs/state-and-lifecycle.html" />
      <description>
        <![CDATA[
          There are three things you should know about <code>setState()</code>.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
// Do Not Modify State Directly

// Wrong
this.state.comment = 'Hello';

// Correct
this.setState({comment: 'Hello'});
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// State Updates May Be Asynchronous

// Wrong
this.setState({
  counter: this.state.counter + this.props.increment,
});

// Correct
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// State Updates are Merged

constructor(props) {
  super(props);
  this.state = {
    posts: [],
    comments: []
  };
}

componentDidMount() {
  fetchPosts().then(response => {
    this.setState({
      posts: response.posts
    });
  });

  fetchComments().then(response => {
    this.setState({
      comments: response.comments
    });
  });
}
        ]]>
      </code>
    </concept>
    <concept name="lifecycle">
      <title value="Adding Lifecycle Methods to a Class" />
      <docLink value="https://reactjs.org/docs/state-and-lifecycle.html" />
      <description>
        <![CDATA[
          In applications with many components, itâ€™s very important to free up resources taken by the components when they are destroyed.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
class Clock extends React.Component {
  constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }

  componentDidMount() {
    this.timerID = setInterval(
      () => this.tick(),
      1000
    );
  }

  componentWillUnmount() {
    clearInterval(this.timerID);
  }

  tick() {
    this.setState({
      date: new Date()
    });
  }

  render() {
    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
}

ReactDOM.render(
  <Clock />,
  document.getElementById('root')
);
        ]]>
      </code>
    </concept>
  </topic>
</data>