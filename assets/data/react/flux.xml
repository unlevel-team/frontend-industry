<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="flux">
    <title value="React Redux" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
        The React Redux
      ]]>
    </description>
    <concept name="provider">
      <title value="Provider" />
      <docLink value="https://react-redux.js.org/introduction/quick-start" />
      <description>
        <![CDATA[
          React Redux provides <code>&lt;Provider /&gt;</code>, which makes the Redux store available to the rest of your app.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
import React from 'react'
import ReactDOM from 'react-dom'

import { Provider } from 'react-redux'
import store from './store'

import App from './App'

const rootElement = document.getElementById('root')
ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  rootElement
)
        ]]>
      </code>
    </concept>
    <concept name="connect">
      <title value="Connect" />
      <docLink value="https://react-redux.js.org/introduction/quick-start" />
      <description>
        <![CDATA[
          React Redux provides a <code>connect</code> function for you to connect your component to the store.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
import { connect } from 'react-redux'
import { increment, decrement, reset } from './actionCreators'

// const Counter = ...

const mapStateToProps = (state /*, ownProps*/) => {
  return {
    counter: state.counter,
  }
}

const mapDispatchToProps = { increment, decrement, reset }

export default connect(mapStateToProps, mapDispatchToProps)(Counter)
        ]]>
      </code>
    </concept>
    <concept name="connecting-components">
      <title value="Connecting the Components" />
      <docLink value="https://react-redux.js.org/introduction/basic-tutorial" />
      <description>
        <![CDATA[
          React Redux provides a <code>connect</code> function for you to read values from the Redux store (and re-read the values when the store updates).
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
const mapStateToProps = (state, ownProps) => ({
  // ... computed data from state and optionally ownProps
})

const mapDispatchToProps = {
  // ... normally is an object full of action creators
}

// `connect` returns a new function that accepts the component to wrap:
const connectToStore = connect(
  mapStateToProps,
  mapDispatchToProps
)
// and that function returns the connected, wrapper component:
const ConnectedComponent = connectToStore(Component)

// We normally do both in one step, like this:
connect(
  mapStateToProps,
  mapDispatchToProps
)(Component)
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// redux/actions.js
import { ADD_TODO } from './actionTypes'

let nextTodoId = 0
export const addTodo = content => ({
  type: ADD_TODO,
  payload: {
    id: ++nextTodoId,
    content
  }
})

// ... other actions
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// components/AddTodo.js

import React from 'react'
import { connect } from 'react-redux'
import { addTodo } from '../redux/actions'

class AddTodo extends React.Component {
  // ...

  handleAddTodo = () => {
    // dispatches actions to add todo
    this.props.addTodo(this.state.input)

    // sets state back to empty string
    this.setState({ input: '' })
  }

  render() {
    return (
      <div>
        <input
          onChange={e => this.updateInput(e.target.value)}
          value={this.state.input}
        />
        <button className="add-todo" onClick={this.handleAddTodo}>
          Add Todo
        </button>
      </div>
    )
  }
}

export default connect(
  null,
  { addTodo }
)(AddTodo)
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// components/TodoList.js

// ...other imports
import { connect } from "react-redux";

const TodoList = // ... UI component implementation

const mapStateToProps = state => {
  const { byIds, allIds } = state.todos || {};
  const todos =
    allIds && allIds.length
      ? allIds.map(id => (byIds ? { ...byIds[id], id } : null))
      : null;
  return { todos };
};

export default connect(mapStateToProps)(TodoList);
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// redux/selectors.js

export const getTodosState = store => store.todos

export const getTodoList = store =>
  getTodosState(store) ? getTodosState(store).allIds : []

export const getTodoById = (store, id) =>
  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {}

export const getTodos = store =>
  getTodoList(store).map(id => getTodoById(store, id))
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// components/TodoList.js

// ...other imports
import { connect } from "react-redux";
import { getTodos } from "../redux/selectors";

const TodoList = // ... UI component implementation

export default connect(state => ({ todos: getTodos(state) }))(TodoList);
        ]]>
      </code>
    </concept>
    <concept name="custom-context">
      <title value="Providing Custom Context" />
      <docLink value="https://react-redux.js.org/using-react-redux/accessing-store" />
      <description>
        <![CDATA[
          Instead of using the default context instance from React Redux, you may supply your own custom context instance.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
<Provider context={MyContext} store={store}>
  <App />
</Provider>
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
// You can pass the context as an option to connect
export default connect(
  mapState,
  mapDispatch,
  null,
  { context: MyContext }
)(MyComponent)

// or, call connect as normal to start
const ConnectedComponent = connect(
  mapState,
  mapDispatch
)(MyComponent)

// Later, pass the custom context as a prop to the connected component
<ConnectedComponent context={MyContext} />
        ]]>
      </code>
    </concept>
    <concept name="multiple-stores">
      <title value="Multiple Stores" />
      <docLink value="https://react-redux.js.org/using-react-redux/accessing-store" />
      <description>
        <![CDATA[
          Redux was designed to use a single store. However, if you are in an unavoidable position of needing to use multiple stores, 
          with v6 you may do so by providing (multiple) custom contexts. This also provides a natural isolation of the stores as they live in separate context instances.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
// a naive example
const ContextA = React.createContext();
const ContextB = React.createContext();

// assuming reducerA and reducerB are proper reducer functions
const storeA = createStore(reducerA);
const storeB = createStore(reducerB);

// supply the context instances to Provider
function App() {
  return (
    <Provider store={storeA} context={ContextA} />
      <Provider store={storeB} context={ContextB}>
        <RootModule />
      </Provider>
    </Provider>
  );
}

// fetch the corresponding store with connected components
// you need to use the correct context
connect(mapStateA, null, null, { context: ContextA })(MyComponentA)

// You may also pass the alternate context instance directly to the connected component instead
<ConnectedMyComponentA context={ContextA} />

// it is possible to chain connect()
// in this case MyComponent will receive merged props from both stores
compose(
  connect(mapStateA, null, null, { context: ContextA }),
  connect(mapStateB, null, null, { context: ContextB })
)(MyComponent);
        ]]>
      </code>
    </concept>
  </topic>
</data>