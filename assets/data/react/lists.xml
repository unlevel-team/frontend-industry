<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="lists">
    <title value="React lists and keys" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
        You can build collections of elements and include them in JSX using curly braces <code>{}</code> and the <code>map</code> function.
      ]]>
    </description>
    <concept name="basic-list-component">
      <title value="Basic List Component" />
      <docLink value="https://reactjs.org/docs/lists-and-keys.html" />
      <description>
        <![CDATA[
          The <code>&lt;head&gt;</code> element is a container for metadata (data about data) and is placed between the <code>&lt;html&gt;</code> tag and the <code>&lt;body&gt;</code> tag.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    <li key={number.toString()}>
      {number}
    </li>
  );
  return (
    <ul>{listItems}</ul>
  );
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
function NumberList(props) {
  const numbers = props.numbers;
  return (
    <ul>
      {numbers.map((number) =>
        <ListItem key={number.toString()}
                  value={number} />
      )}
    </ul>
  );
}
        ]]>
      </code>
    </concept>
    <concept name="keys">
      <title value="Keys" />
      <docLink value="https://reactjs.org/docs/lists-and-keys.html" />
      <description>
        <![CDATA[
          Keys help React identify which items have changed, are added, or are removed. 
          Keys should be given to the elements inside the array to give the elements a stable identity. <br>
          Keys used within arrays should be unique among their siblings. However they donâ€™t need to be globally unique. 
          We can use the same keys when we produce two different arrays.
        ]]>
      </description>
      <code language="html">
        <![CDATA[
function ListItem(props) {
  // Correct! There is no need to specify the key here:
  return <li>{props.value}</li>;
}

function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number) =>
    // Correct! Key should be specified inside the array.
    <ListItem key={number.toString()} value={number} />
  );
  return (
    <ul>
      {listItems}
    </ul>
  );
}

const numbers = [1, 2, 3, 4, 5];
ReactDOM.render(
  <NumberList numbers={numbers} />,
  document.getElementById('root')
);
        ]]>
      </code>
    </concept>
  </topic>
</data>