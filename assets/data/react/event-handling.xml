<?xml version="1.0" encoding="UTF-8"?>
<data>
  <topic name="event-handling">
    <title value="React Handling Events" />
    <!-- <docLink value="https://www.w3schools.com/tags/tag_title.asp" /> -->
    <description>
      <![CDATA[
        Handling Events
      ]]>
    </description>
    <concept name="handling-events">
      <title value="Handling Events" />
      <docLink value="https://reactjs.org/docs/handling-events.html" />
      <description>
        <![CDATA[
          Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences: <br>
          <ul>
            <li>React events are named using camelCase, rather than lowercase.</li>
            <li>With JSX you pass a function as the event handler, rather than a string.</li>
          </ul>
          Another difference is that you cannot return <code>false</code> to prevent default behavior in React. You must call <code>preventDefault</code> explicitly. 
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
function ActionLink() {
  function handleClick(e) {
    e.preventDefault();
    console.log('The link was clicked.');
  }

  return (
    <a href="#" onClick={handleClick}>
      Click me
    </a>
  );
}
        ]]>
      </code>
      <code language="jsx">
        <![CDATA[
class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};

    // This binding is necessary to make `this` work in the callback
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState(state => ({
      isToggleOn: !state.isToggleOn
    }));
  }

  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}

ReactDOM.render(
  <Toggle />,
  document.getElementById('root')
);
        ]]>
      </code>
    </concept>
    <concept name="passing-arguments">
      <title value="Passing Arguments to Event Handlers" />
      <docLink value="https://reactjs.org/docs/handling-events.html" />
      <description>
        <![CDATA[
          Inside a loop, it is common to want to pass an extra parameter to an event handler. <br>
          In both cases, the <code>e</code> argument representing the React event will be passed as a second argument after the ID. With an arrow function, 
          we have to pass it explicitly, but with <code>bind</code> any further arguments are automatically forwarded.
        ]]>
      </description>
      <code language="jsx">
        <![CDATA[
<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>
        ]]>
      </code>
    </concept>
  </topic>
</data>